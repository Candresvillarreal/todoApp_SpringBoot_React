FrontEnd -> React Framework (Javascript)  (Visual Studio Code - VSC)
Backend -> Spring Boot (REST API)
Database -> H2 (MySQL)
Authentication -> Spring Security (JWT)



Instalar Node.js (https://nodejs.ord) junto NPM utilizando Windows Installer
Comprobar las versiones instaladas:
- abrir cmd (consola windows)
- node --version
- npm --version

Crear un directorio con el nombre del proyecto (todo_app)
Abrir el CMD e ir a ese directorio (cd C:\Users\Carlos.Villarreal\Documents\todo_app)
npm init
package name: todo-npm-project
Esto crea un .json el directorio que recoge la información introducida

Instalar tambien JQUERY
npm install jquery

Dentro del directorio original (todo_app) crear otro directorio: Frontend y acceder a él desde la terminal (cd Frontend)

Crear la aplicación React:

npx create-react-app todo-app

Esto crea dentro del directorio Frontend un nuevo directorio (todo-app). Acceder a él desde la terminal (cd todo-app) y npm start
Esto arranca el servidor de React y se abrirá la página del navegador que mostrará el logo de React dando vueltas sobre fondo negro.
Cualquier cambio que ejecutes en la aplicación se verá automáticamente en el navegador.
Esto mismo se puede hacer desde VSC: desde el menú de la parte superior Terminal -> New Terminal -> ruta completa cd C:\Users\Carlos.Villarreal\Documents\todo_app\Frontend\todo-app
y npm start.
Para parar el servidor, ejecutar dos veces ctrl+c

Dentro del directorio "public" está el archivo index.html donde puedes por ejemplo canmbiar el título que se muestra en la pestaña del navegador (cambiando la etiqueta title)

Instalar react-router

npm install react-router-dom

Bootstrap:

npm install bootstrap

Ir a node_modules y buscar bootstrap -> dist -> css -> bootstrap.min.css y copiar el path.
Ir a index.js e importar bootstrap copiando el path copiado -> import 'bootstrap/dist/css/bootstrap.min.css';




Todo REST API

CRUD

Devolver todos los TODOS
Devover un Todo
Eliminar un TODO
Updatear un TODO
Crear un TODO

Importar el proyecto (MAVEN) desde Eclipse o Intellij

Instalar axios

npm install axios

Ojo: los errores en las llamadas puede deberse a CORS (habilitar @CrossOrigins en el controller)

TODO RestApi - Postman Collection Requests

- Devolver todos los Todos: @GetMapping("/users/{usernamne}/todos")  -> Postman: GET -> GetAllTodos -> http://localhost:8080/users/Carlos/todos -> (http://localhost:8080/users/{user}/todos)
- Devolver 1 TODO: @GetMapping("/users/{username}/todos/{id}") -> Postman: GET -> GetTodoById -> http://localhost:8080/users/Carlos/todos/4 ->  (http://localhost:8080/users/{user}/todos/{id})
- Eliminar 1 TODO: @DeleteMapping("/users/{username}/todos/{id}") -> Postman: DEL -> DeleteTodoById -> http://localhost:8080/users/Carlos/todos/4  -> (http://localhost:8080/users/{user}/todos/{id})
- Update 1 TODO:   @PutMapping("/users/{username}/todos/{id}")    -> Postman: PUT -> http://localhost:8080/users/Carlos/todos/4   -> http://localhost:8080/users/Carlos/todos/{id}
- Crear 1 TODO:    @PostMapping("/users/{username}/todos")		  -> Postman: POST -> http://localhost:8080/users/Carlos/todos    -> http://localhost:8080/users/Carlos/todos

Instalar formik (para gestionar formularios)

npm install formik
npm install moment

Habilitar Spring Security
Añadir en el pom.xml

<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-security</artifactId>
</dependency>

Al reiniciar Spring, se genera en la consola un "security password" : Using generated security password: 83621988-47c6-4a83-b86a-28d82aebe23c
Personalización: ir a application.properties y añadir el usuario y contraseña:
spring.security.user.name=Carlos
spring.security.user.password=dummy
En postman hay que añadir en Authorization -> Auth Type -> Basic Authorization y añadir el usuario y la contraseña

Para el Frontend, lanzar una request utilizando Postman (por ejemplo la request para crear un todo, y una vez ejecutada, comprobar los Headers.  Localizar el value del Authorization

//.antMatchers(HttpMethod.OPTIONS, "/**").permitAll()
 
.requestMatchers(HttpMethod.OPTIONS, "/**").permitAll()


Basic Q2FybG9zOmR1bW15 (este es el valor que utilizo en el FrontEnd)

322

public enum DoneStatus {
    SI, NO
}

private DoneStatus done;

public DoneStatus isDone() {
	return done;
}

public void setDone(DoneStatus done) {
	this.done = done;
}

También se puede hacer como un string

H2 Database (BBDD en memoria)

application.properties -> spring.h2.console.enabled=true

En el pom.xml
<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-data-jpa</artifactId>
</dependency>
<dependency>
	<groupId>com.h2database</groupId>
	<artifactId>h2</artifactId>
</dependency>


Base Datos MySQL -> MariaDb

user: root
password: 

bbdd: todo_prueba

consultar el orden de los campos en la tabla todo:
SELECT * FROM `todo`;
El orden es: done, id, target_date, description, username
Insertar los datos en ese orden respetando como están escritos los campos en Mysql (alguno puede ser distinto a como está escrito en Spring boot).
Copiar la sentencias SQL en el arhivo data.sql (en Resources)


CAMBIOS

Terminar el login:

Meter los campos del formulario y el botón en un div, darle borde y un background color diferente (probar como queda)

En los todos en el frontend:

Incluir los styles en el TodoApp.css (los que no son de bootstrap) como el width del login.... revisar los componentes

Probar con los botones de Borrar y Actulizar más largos

En lugar de ¿Completado? indicar Estado y en lugar de SI y NO como opciones, cambiar el enum en el backend y en frontend para que puede
escogerse entre COMPLETADO y PENDIENTE


